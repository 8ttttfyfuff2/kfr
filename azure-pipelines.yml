jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get install -y ninja-build libmpfr-dev
      ci/run.sh build-release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release

- job: Linux_ARM
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - bash: |
      set -e
      sudo apt-get install -y ninja-build g++-arm-linux-gnueabihf qemu
      ci/run.sh build-release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../cmake/arm.cmake -DARCH_FLAGS=-DLIBC_WORKAROUND_GETS=1

- job: macOS
  strategy:
    matrix:
      xcode10.1:
        XCODE_VER: 10.1
      xcode10:
        XCODE_VER: 10
      xcode9.4.1:
        XCODE_VER: 9.4.1
      xcode9.0.1:
        XCODE_VER: 9.0.1
      xcode8.3.3:
        XCODE_VER: 8.3.3
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - bash: |
      set -e
      /bin/bash -c "sudo xcode-select -s /Applications/Xcode_$(XCODE_VER).app/Contents/Developer"
      brew install ninja
      ci/run.sh build-release -DCMAKE_BUILD_TYPE=Release

- job: Windows_MinGW
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - bash: |
      set -e
      choco install llvm ninja
      ci/run.sh build-release -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang++.exe" -DCMAKE_CXX_FLAGS=--target=x86_64-w64-windows-gnu -DCMAKE_BUILD_TYPE=Release

- job: Windows_MSVC64
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install llvm ninja
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      ci\run.sh build-release -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DARCH_FLAGS=-mavx -DCMAKE_CXX_FLAGS=-m64 -DCMAKE_BUILD_TYPE=Release

- job: Windows_MSVC32
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - script: |
      choco install llvm ninja
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
      set PATH=%PATH:C:\tools\mingw64\bin;=%
      set PATH=%PATH:C:\Program Files\Git\mingw64\bin;=%
      ci\run.sh build-release -DCMAKE_CXX_COMPILER="C:/Program Files/LLVM/bin/clang-cl.exe" -DARCH_FLAGS=-mavx -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_BUILD_TYPE=Release

- job: Windows_AVX512
  pool: WIN-AVX512
  steps:
  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
      ci\run.sh build-release -DARCH_TESTS=ON -DCMAKE_CXX_COMPILER="C:/LLVM/bin/clang-cl.exe" -DARCH_FLAGS="-mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl" -DCMAKE_CXX_FLAGS=-m64 -DCMAKE_BUILD_TYPE=Release
